<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="453" />
    <option name="newTranslationDialogWidth" value="783" />
    <option name="newTranslationDialogX" value="704" />
    <option name="newTranslationDialogY" value="282" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Cannot access database on the main thread since it may potentially lock the UI for a long period of time." />
      <item value="Cannot figure out how to save this field into database." />
      <item value="Embedded" />
      <item value="Returns flow where all subsequent repetitions of the same value are filtered out. Note that any instance of StateFlow already behaves as if distinctUtilChanged operator is applied to it, so applying distinctUntilChanged to a StateFlow has no effect. See StateFlow documentation on Operator Fusion. Also, repeated application of distinctUntilChanged operator on any flow has no effect." />
      <item value="chapter" />
      <item value="Comment" />
      <item value="Dubbing Binder" />
      <item value="indices" />
      <item value="Builds a LiveData that has values yielded from the given block that executes on a LiveDataScope. The block starts executing when the returned LiveData becomes active (LiveData.onActive). If the LiveData becomes inactive (LiveData.onInactive) while the block is executing, it will be cancelled after timeoutInMs milliseconds unless the LiveData becomes active again before that timeout (to gracefully handle cases like Activity rotation). Any value LiveDataScope.emited from a cancelled block will be ignored. After a cancellation, if the LiveData becomes active again, the block will be re-executed from the beginning. If you would like to continue the operations based on where it was stopped last, you can use the LiveDataScope.latestValue function to get the last LiveDataScope.emited value. If the block completes successfully or is cancelled due to reasons other than LiveData becoming inactive, it will not be re-executed even after LiveData goes through active inactive cycle. As a best practice, it is important for the block to cooperate in cancellation. See kotlin coroutines documentation for details https:kotlinlang.orgdocsreferencecoroutinescancellation-and-timeouts.html. a simple LiveData that receives value 3, 3 seconds after being observed for the first time. val data : LiveData&lt;Int&gt; = liveData { delay(3000) emit(3) }" />
      <item value="large Heap" />
      <item value="hardware Accelerated" />
      <item value="banned" />
      <item value="Launches and runs the given block when the [Lifecycle] controlling this [LifecycleCoroutineScope] is at least in [Lifecycle.State.RESUMED] state. The returned [Job] will be cancelled when the [Lifecycle] is destroyed. Caution: This API is not recommended to use as it can lead to wasted resources in some cases. Please, use the [Lifecycle.repeatOnLifecycle] API instead. This API will be removed in a future release. @see Lifecycle.whenResumed @see Lifecycle.coroutineScope" />
      <item value="public open operator fun equals( other: Any? ): Boolean Indicates whether some other object is &quot;equal to&quot; this one. Implementations must fulfil the following requirements: Reflexive: for any non-null value x, x.equals(x) should return true. Symmetric: for any non-null values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. Transitive: for any non-null values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. Consistent: for any non-null values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. Never equal to null: for any non-null value x, x.equals(null) should return false." />
      <item value="Max Scheduled Generation" />
      <item value="Chapter List" />
      <item value="Provide a new Fragment associated with the specified position. The adapter will be responsible for the Fragment lifecycle: The Fragment will be used to display an item. The Fragment will be destroyed when it gets too far from the viewport, and its state will be saved. When the item is close to the viewport again, a new Fragment will be requested, and a previously saved state will be used to initialize it. See Also: ViewPager2.setOffscreenPageLimit" />
      <item value="Provide a new Fragment associated with the specified position. The adapter will be responsible for the Fragment lifecycle: The Fragment will be used to display an item. The Fragment will be destroyed when it gets too far from the viewport, and its state will be saved. When the item is close to the viewport again, a new Fragment will be requested, and a previously saved state will be used to initialize it." />
      <item value="回忆" />
      <item value="export Schema" />
      <item value="Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number." />
      <item value="古籍" />
      <item value="DYNASTY" />
      <item value="KEY CATEGORY" />
      <item value="poetry" />
      <item value="我的收益" />
      <item value="合集" />
      <item value="member privilege" />
      <item value="extra" />
      <item value="obtain" />
      <item value="Math Context" />
      <item value="ratio" />
      <item value="Entity" />
      <item value="proportion" />
      <item value="比例" />
      <item value="wallet" />
      <item value="Expecting an element" />
      <item value="Not enough information to infer type variable T" />
      <item value="Function invocation 'apply()' expected" />
      <item value="expected" />
      <item value="Unexpected tokens (use ';' to separate expressions on the same line)" />
      <item value="Android Studio Bumblebee | 2021.1.1 Patch 1 is a major new release and includes performance improvements, bug fixes and new features. Intellij 2021.1.1 Platform Update New Device Manager ADB over Wi-Fi Run Instrumented Tests in Android Studio using Gradle Android Gradle Plugin Upgrade Assistant now updates API usage Non-Transitive R classes on for new projects Apple Silicon Support Update Jank detection track in Profilers Profileable app profiling support in Studio Profilers Network Inspection and ability to capture Layout Inspector snapshots Support for Compose semantics in the Layout Inspector Interactive Preview Animated Vector Drawables Preview Updated Device picker for Design Tools Important After updating, you need to restart Android Studio to apply any memory settings you migrate from an earlier version of the IDE." />
      <item value="There are multiple good constructors and Room will pick the no-arg constructor" />
      <item value="Intellij 2021.1.1 Platform Update New Device Manager ADB over Wi-Fi Run Instrumented Tests in Android Studio using Gradle Android Gradle Plugin Upgrade Assistant now updates API usage Non-Transitive R classes on for new projects Apple Silicon Support Update Jank detection track in Profilers Profileable app profiling support in Studio Profilers Network Inspection and ability to capture Layout Inspector snapshots Support for Compose semantics in the Layout Inspector Interactive Preview Animated Vector Drawables Preview Updated Device picker for Design Tools" />
      <item value="snapshot" />
      <item value="Compilation Failed Exception" />
      <item value="unrecognized Attribute name MODULE" />
      <item value="java.lang.reflect.Invocation Target Exception" />
      <item value="A failure occurred while executing com.android.build.gradle.internal.tasks.CheckAarMetadataWorkAction" />
      <item value="Caused by: java.lang.RuntimeException: The minCompileSdk (31) specified in a" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="421" />
        <entry key="ENGLISH" value="422" />
        <entry key="FRENCH" value="2" />
        <entry key="CROATIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SOMALI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1646639736462" />
  </component>
</application>